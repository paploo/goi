/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables.records


import java.time.LocalDate
import java.util.UUID

import net.paploo.goi.persistence.db.goi.grammar.tables.Rule

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RuleRecord() : UpdatableRecordImpl<RuleRecord>(Rule.RULE), Record10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var meaning: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var titlePreferredSpelling: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var titlePhoneticSpelling: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var titleFuriganaTemplate: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var howToUse: Array<String?>?
        set(value): Unit = set(5, value)
        get(): Array<String?>? = get(5) as Array<String?>?

    open var jlptLevel: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var rowNum: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var dateAdded: LocalDate?
        set(value): Unit = set(8, value)
        get(): LocalDate? = get(8) as LocalDate?

    open var tags: Array<String?>?
        set(value): Unit = set(9, value)
        get(): Array<String?>? = get(9) as Array<String?>?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?> = super.fieldsRow() as Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?>
    override fun valuesRow(): Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?> = super.valuesRow() as Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?>
    override fun field1(): Field<UUID?> = Rule.RULE.ID
    override fun field2(): Field<String?> = Rule.RULE.MEANING
    override fun field3(): Field<String?> = Rule.RULE.TITLE_PREFERRED_SPELLING
    override fun field4(): Field<String?> = Rule.RULE.TITLE_PHONETIC_SPELLING
    override fun field5(): Field<String?> = Rule.RULE.TITLE_FURIGANA_TEMPLATE
    override fun field6(): Field<Array<String?>?> = Rule.RULE.HOW_TO_USE
    override fun field7(): Field<Int?> = Rule.RULE.JLPT_LEVEL
    override fun field8(): Field<Int?> = Rule.RULE.ROW_NUM
    override fun field9(): Field<LocalDate?> = Rule.RULE.DATE_ADDED
    override fun field10(): Field<Array<String?>?> = Rule.RULE.TAGS
    override fun component1(): UUID? = id
    override fun component2(): String? = meaning
    override fun component3(): String? = titlePreferredSpelling
    override fun component4(): String? = titlePhoneticSpelling
    override fun component5(): String? = titleFuriganaTemplate
    override fun component6(): Array<String?>? = howToUse
    override fun component7(): Int? = jlptLevel
    override fun component8(): Int? = rowNum
    override fun component9(): LocalDate? = dateAdded
    override fun component10(): Array<String?>? = tags
    override fun value1(): UUID? = id
    override fun value2(): String? = meaning
    override fun value3(): String? = titlePreferredSpelling
    override fun value4(): String? = titlePhoneticSpelling
    override fun value5(): String? = titleFuriganaTemplate
    override fun value6(): Array<String?>? = howToUse
    override fun value7(): Int? = jlptLevel
    override fun value8(): Int? = rowNum
    override fun value9(): LocalDate? = dateAdded
    override fun value10(): Array<String?>? = tags

    override fun value1(value: UUID?): RuleRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): RuleRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): RuleRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): RuleRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): RuleRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Array<String?>?): RuleRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Int?): RuleRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Int?): RuleRecord {
        set(7, value)
        return this
    }

    override fun value9(value: LocalDate?): RuleRecord {
        set(8, value)
        return this
    }

    override fun value10(value: Array<String?>?): RuleRecord {
        set(9, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: String?, value5: String?, value6: Array<String?>?, value7: Int?, value8: Int?, value9: LocalDate?, value10: Array<String?>?): RuleRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised RuleRecord
     */
    constructor(id: UUID? = null, meaning: String? = null, titlePreferredSpelling: String? = null, titlePhoneticSpelling: String? = null, titleFuriganaTemplate: String? = null, howToUse: Array<String?>? = null, jlptLevel: Int? = null, rowNum: Int? = null, dateAdded: LocalDate? = null, tags: Array<String?>? = null): this() {
        this.id = id
        this.meaning = meaning
        this.titlePreferredSpelling = titlePreferredSpelling
        this.titlePhoneticSpelling = titlePhoneticSpelling
        this.titleFuriganaTemplate = titleFuriganaTemplate
        this.howToUse = howToUse
        this.jlptLevel = jlptLevel
        this.rowNum = rowNum
        this.dateAdded = dateAdded
        this.tags = tags
        resetChangedOnNotNull()
    }
}
