/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.keys.LINKAGES_VOCABULARY_ID_KEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.LINKAGES__LINKAGES_VOCABULARY_ID_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.LinkagesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Linkages(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LinkagesRecord>?,
    aliased: Table<LinkagesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LinkagesRecord>(
    alias,
    Vocabulary.VOCABULARY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.linkages</code>
         */
        val LINKAGES: Linkages = Linkages()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LinkagesRecord> = LinkagesRecord::class.java

    /**
     * The column <code>vocabulary.linkages.vocabulary_id</code>.
     */
    val VOCABULARY_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("vocabulary_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.preferred_definition_id</code>.
     */
    val PREFERRED_DEFINITION_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("preferred_definition_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.preferred_spelling_id</code>.
     */
    val PREFERRED_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("preferred_spelling_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.phonetic_spelling_id</code>.
     */
    val PHONETIC_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("phonetic_spelling_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.alt_phonetic_spelling_id</code>.
     */
    val ALT_PHONETIC_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("alt_phonetic_spelling_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>vocabulary.linkages.kanji_spelling_id</code>.
     */
    val KANJI_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("kanji_spelling_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>vocabulary.linkages.conjugation_set_id</code>.
     */
    val CONJUGATION_SET_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("conjugation_set_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<LinkagesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LinkagesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>vocabulary.linkages</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.linkages</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.linkages</code> table reference
     */
    constructor(): this(DSL.name("linkages"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LinkagesRecord>): this(Internal.createPathAlias(child, key), child, key, LINKAGES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getUniqueKeys(): List<UniqueKey<LinkagesRecord>> = listOf(LINKAGES_VOCABULARY_ID_KEY)
    override fun getReferences(): List<ForeignKey<LinkagesRecord, *>> = listOf(LINKAGES__LINKAGES_VOCABULARY_ID_FKEY)

    private lateinit var _vocabulary: net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary

    /**
     * Get the implicit join path to the <code>vocabulary.vocabulary</code>
     * table.
     */
    fun vocabulary(): net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary {
        if (!this::_vocabulary.isInitialized)
            _vocabulary = net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary(this, LINKAGES__LINKAGES_VOCABULARY_ID_FKEY)

        return _vocabulary;
    }

    val vocabulary: net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary
        get(): net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary = vocabulary()
    override fun `as`(alias: String): Linkages = Linkages(DSL.name(alias), this)
    override fun `as`(alias: Name): Linkages = Linkages(alias, this)
    override fun `as`(alias: Table<*>): Linkages = Linkages(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Linkages = Linkages(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Linkages = Linkages(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Linkages = Linkages(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<UUID?, UUID?, UUID?, UUID?, UUID?, UUID?, UUID?> = super.fieldsRow() as Row7<UUID?, UUID?, UUID?, UUID?, UUID?, UUID?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, UUID?, UUID?, UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, UUID?, UUID?, UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
