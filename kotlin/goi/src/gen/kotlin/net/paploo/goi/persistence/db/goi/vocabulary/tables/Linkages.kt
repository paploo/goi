/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.keys.LINKAGES_VOCABULARY_ID_KEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.LINKAGES__LINKAGES_VOCABULARY_ID_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary.VocabularyPath
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.LinkagesRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Linkages(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LinkagesRecord>?,
    parentPath: InverseForeignKey<out Record, LinkagesRecord>?,
    aliased: Table<LinkagesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<LinkagesRecord>(
    alias,
    Vocabulary.VOCABULARY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.linkages</code>
         */
        val LINKAGES: Linkages = Linkages()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LinkagesRecord> = LinkagesRecord::class.java

    /**
     * The column <code>vocabulary.linkages.vocabulary_id</code>.
     */
    val VOCABULARY_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("vocabulary_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.preferred_definition_id</code>.
     */
    val PREFERRED_DEFINITION_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("preferred_definition_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.preferred_spelling_id</code>.
     */
    val PREFERRED_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("preferred_spelling_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.phonetic_spelling_id</code>.
     */
    val PHONETIC_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("phonetic_spelling_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.linkages.alt_phonetic_spelling_id</code>.
     */
    val ALT_PHONETIC_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("alt_phonetic_spelling_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>vocabulary.linkages.kanji_spelling_id</code>.
     */
    val KANJI_SPELLING_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("kanji_spelling_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>vocabulary.linkages.conjugation_set_id</code>.
     */
    val CONJUGATION_SET_ID: TableField<LinkagesRecord, UUID?> = createField(DSL.name("conjugation_set_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<LinkagesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LinkagesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LinkagesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>vocabulary.linkages</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.linkages</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.linkages</code> table reference
     */
    constructor(): this(DSL.name("linkages"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LinkagesRecord>?, parentPath: InverseForeignKey<out Record, LinkagesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, LINKAGES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LinkagesPath : Linkages, Path<LinkagesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LinkagesRecord>?, parentPath: InverseForeignKey<out Record, LinkagesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<LinkagesRecord>): super(alias, aliased)
        override fun `as`(alias: String): LinkagesPath = LinkagesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LinkagesPath = LinkagesPath(alias, this)
        override fun `as`(alias: Table<*>): LinkagesPath = LinkagesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getUniqueKeys(): List<UniqueKey<LinkagesRecord>> = listOf(LINKAGES_VOCABULARY_ID_KEY)
    override fun getReferences(): List<ForeignKey<LinkagesRecord, *>> = listOf(LINKAGES__LINKAGES_VOCABULARY_ID_FKEY)

    /**
     * Get the implicit join path to the <code>vocabulary.vocabulary</code>
     * table.
     */
    fun vocabulary(): VocabularyPath = vocabulary
    val vocabulary: VocabularyPath by lazy { VocabularyPath(this, LINKAGES__LINKAGES_VOCABULARY_ID_FKEY, null) }
    override fun `as`(alias: String): Linkages = Linkages(DSL.name(alias), this)
    override fun `as`(alias: Name): Linkages = Linkages(alias, this)
    override fun `as`(alias: Table<*>): Linkages = Linkages(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Linkages = Linkages(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Linkages = Linkages(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Linkages = Linkages(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Linkages = Linkages(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Linkages = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Linkages = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Linkages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Linkages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Linkages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Linkages = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Linkages = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Linkages = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Linkages = where(DSL.notExists(select))
}
