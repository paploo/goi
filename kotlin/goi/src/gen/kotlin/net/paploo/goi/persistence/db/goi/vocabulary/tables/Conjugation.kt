/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.CONJUGATION_CONJUGATION_SET_ID_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.CONJUGATION_VALUE_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION_CONJUGATION_SET_ID_POLITENESS_CODE_CHARGE_CODE__KEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION_PKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_FORM_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.ConjugationCharge.ConjugationChargePath
import net.paploo.goi.persistence.db.goi.vocabulary.tables.ConjugationForm.ConjugationFormPath
import net.paploo.goi.persistence.db.goi.vocabulary.tables.ConjugationPoliteness.ConjugationPolitenessPath
import net.paploo.goi.persistence.db.goi.vocabulary.tables.ConjugationSet.ConjugationSetPath
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.ConjugationRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Conjugation(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ConjugationRecord>?,
    parentPath: InverseForeignKey<out Record, ConjugationRecord>?,
    aliased: Table<ConjugationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ConjugationRecord>(
    alias,
    Vocabulary.VOCABULARY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.conjugation</code>
         */
        val CONJUGATION: Conjugation = Conjugation()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ConjugationRecord> = ConjugationRecord::class.java

    /**
     * The column <code>vocabulary.conjugation.id</code>.
     */
    val ID: TableField<ConjugationRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.conjugation_set_id</code>.
     */
    val CONJUGATION_SET_ID: TableField<ConjugationRecord, UUID?> = createField(DSL.name("conjugation_set_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.politeness_code</code>.
     */
    val POLITENESS_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("politeness_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.charge_code</code>.
     */
    val CHARGE_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("charge_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.form_code</code>.
     */
    val FORM_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("form_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.sort_rank</code>.
     */
    val SORT_RANK: TableField<ConjugationRecord, Int?> = createField(DSL.name("sort_rank"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>vocabulary.conjugation.value</code>.
     */
    val VALUE: TableField<ConjugationRecord, String?> = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ConjugationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ConjugationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ConjugationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>vocabulary.conjugation</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.conjugation</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.conjugation</code> table reference
     */
    constructor(): this(DSL.name("conjugation"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ConjugationRecord>?, parentPath: InverseForeignKey<out Record, ConjugationRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CONJUGATION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ConjugationPath : Conjugation, Path<ConjugationRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ConjugationRecord>?, parentPath: InverseForeignKey<out Record, ConjugationRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ConjugationRecord>): super(alias, aliased)
        override fun `as`(alias: String): ConjugationPath = ConjugationPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ConjugationPath = ConjugationPath(alias, this)
        override fun `as`(alias: Table<*>): ConjugationPath = ConjugationPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getIndexes(): List<Index> = listOf(CONJUGATION_CONJUGATION_SET_ID_IDX, CONJUGATION_VALUE_IDX)
    override fun getPrimaryKey(): UniqueKey<ConjugationRecord> = CONJUGATION_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ConjugationRecord>> = listOf(CONJUGATION_CONJUGATION_SET_ID_POLITENESS_CODE_CHARGE_CODE__KEY)
    override fun getReferences(): List<ForeignKey<ConjugationRecord, *>> = listOf(CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY, CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY, CONJUGATION__CONJUGATION_FORM_CODE_FKEY, CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY)

    private lateinit var _conjugationCharge: ConjugationChargePath

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_charge</code> table.
     */
    fun conjugationCharge(): ConjugationChargePath {
        if (!this::_conjugationCharge.isInitialized)
            _conjugationCharge = ConjugationChargePath(this, CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY, null)

        return _conjugationCharge;
    }

    val conjugationCharge: ConjugationChargePath
        get(): ConjugationChargePath = conjugationCharge()

    private lateinit var _conjugationSet: ConjugationSetPath

    /**
     * Get the implicit join path to the <code>vocabulary.conjugation_set</code>
     * table.
     */
    fun conjugationSet(): ConjugationSetPath {
        if (!this::_conjugationSet.isInitialized)
            _conjugationSet = ConjugationSetPath(this, CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY, null)

        return _conjugationSet;
    }

    val conjugationSet: ConjugationSetPath
        get(): ConjugationSetPath = conjugationSet()

    private lateinit var _conjugationForm: ConjugationFormPath

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_form</code> table.
     */
    fun conjugationForm(): ConjugationFormPath {
        if (!this::_conjugationForm.isInitialized)
            _conjugationForm = ConjugationFormPath(this, CONJUGATION__CONJUGATION_FORM_CODE_FKEY, null)

        return _conjugationForm;
    }

    val conjugationForm: ConjugationFormPath
        get(): ConjugationFormPath = conjugationForm()

    private lateinit var _conjugationPoliteness: ConjugationPolitenessPath

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_politeness</code> table.
     */
    fun conjugationPoliteness(): ConjugationPolitenessPath {
        if (!this::_conjugationPoliteness.isInitialized)
            _conjugationPoliteness = ConjugationPolitenessPath(this, CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY, null)

        return _conjugationPoliteness;
    }

    val conjugationPoliteness: ConjugationPolitenessPath
        get(): ConjugationPolitenessPath = conjugationPoliteness()
    override fun `as`(alias: String): Conjugation = Conjugation(DSL.name(alias), this)
    override fun `as`(alias: Name): Conjugation = Conjugation(alias, this)
    override fun `as`(alias: Table<*>): Conjugation = Conjugation(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Conjugation = Conjugation(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Conjugation = Conjugation(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Conjugation = Conjugation(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Conjugation = Conjugation(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Conjugation = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Conjugation = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Conjugation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Conjugation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Conjugation = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Conjugation = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Conjugation = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Conjugation = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Conjugation = where(DSL.notExists(select))
}
