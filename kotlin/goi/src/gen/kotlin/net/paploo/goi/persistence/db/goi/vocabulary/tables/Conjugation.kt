/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.CONJUGATION_CONJUGATION_SET_ID_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.CONJUGATION_VALUE_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION_CONJUGATION_SET_ID_POLITENESS_CODE_CHARGE_CODE__KEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION_PKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_FORM_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.ConjugationRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Conjugation(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ConjugationRecord>?,
    aliased: Table<ConjugationRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ConjugationRecord>(
    alias,
    Vocabulary.VOCABULARY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.conjugation</code>
         */
        val CONJUGATION: Conjugation = Conjugation()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ConjugationRecord> = ConjugationRecord::class.java

    /**
     * The column <code>vocabulary.conjugation.id</code>.
     */
    val ID: TableField<ConjugationRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.conjugation_set_id</code>.
     */
    val CONJUGATION_SET_ID: TableField<ConjugationRecord, UUID?> = createField(DSL.name("conjugation_set_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.politeness_code</code>.
     */
    val POLITENESS_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("politeness_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.charge_code</code>.
     */
    val CHARGE_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("charge_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.form_code</code>.
     */
    val FORM_CODE: TableField<ConjugationRecord, String?> = createField(DSL.name("form_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.conjugation.sort_rank</code>.
     */
    val SORT_RANK: TableField<ConjugationRecord, Int?> = createField(DSL.name("sort_rank"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>vocabulary.conjugation.value</code>.
     */
    val VALUE: TableField<ConjugationRecord, String?> = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ConjugationRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ConjugationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>vocabulary.conjugation</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.conjugation</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.conjugation</code> table reference
     */
    constructor(): this(DSL.name("conjugation"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ConjugationRecord>): this(Internal.createPathAlias(child, key), child, key, CONJUGATION, null)
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getIndexes(): List<Index> = listOf(CONJUGATION_CONJUGATION_SET_ID_IDX, CONJUGATION_VALUE_IDX)
    override fun getPrimaryKey(): UniqueKey<ConjugationRecord> = CONJUGATION_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ConjugationRecord>> = listOf(CONJUGATION_CONJUGATION_SET_ID_POLITENESS_CODE_CHARGE_CODE__KEY)
    override fun getReferences(): List<ForeignKey<ConjugationRecord, *>> = listOf(CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY, CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY, CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY, CONJUGATION__CONJUGATION_FORM_CODE_FKEY)

    private lateinit var _conjugationSet: ConjugationSet
    private lateinit var _conjugationPoliteness: ConjugationPoliteness
    private lateinit var _conjugationCharge: ConjugationCharge
    private lateinit var _conjugationForm: ConjugationForm

    /**
     * Get the implicit join path to the <code>vocabulary.conjugation_set</code>
     * table.
     */
    fun conjugationSet(): ConjugationSet {
        if (!this::_conjugationSet.isInitialized)
            _conjugationSet = ConjugationSet(this, CONJUGATION__CONJUGATION_CONJUGATION_SET_ID_FKEY)

        return _conjugationSet;
    }

    val conjugationSet: ConjugationSet
        get(): ConjugationSet = conjugationSet()

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_politeness</code> table.
     */
    fun conjugationPoliteness(): ConjugationPoliteness {
        if (!this::_conjugationPoliteness.isInitialized)
            _conjugationPoliteness = ConjugationPoliteness(this, CONJUGATION__CONJUGATION_POLITENESS_CODE_FKEY)

        return _conjugationPoliteness;
    }

    val conjugationPoliteness: ConjugationPoliteness
        get(): ConjugationPoliteness = conjugationPoliteness()

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_charge</code> table.
     */
    fun conjugationCharge(): ConjugationCharge {
        if (!this::_conjugationCharge.isInitialized)
            _conjugationCharge = ConjugationCharge(this, CONJUGATION__CONJUGATION_CHARGE_CODE_FKEY)

        return _conjugationCharge;
    }

    val conjugationCharge: ConjugationCharge
        get(): ConjugationCharge = conjugationCharge()

    /**
     * Get the implicit join path to the
     * <code>vocabulary.conjugation_form</code> table.
     */
    fun conjugationForm(): ConjugationForm {
        if (!this::_conjugationForm.isInitialized)
            _conjugationForm = ConjugationForm(this, CONJUGATION__CONJUGATION_FORM_CODE_FKEY)

        return _conjugationForm;
    }

    val conjugationForm: ConjugationForm
        get(): ConjugationForm = conjugationForm()
    override fun `as`(alias: String): Conjugation = Conjugation(DSL.name(alias), this)
    override fun `as`(alias: Name): Conjugation = Conjugation(alias, this)
    override fun `as`(alias: Table<*>): Conjugation = Conjugation(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Conjugation = Conjugation(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Conjugation = Conjugation(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Conjugation = Conjugation(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<UUID?, UUID?, String?, String?, String?, Int?, String?> = super.fieldsRow() as Row7<UUID?, UUID?, String?, String?, String?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, String?, String?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, String?, String?, String?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
