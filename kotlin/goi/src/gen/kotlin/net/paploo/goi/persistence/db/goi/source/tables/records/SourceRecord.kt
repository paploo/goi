/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.source.tables.records


import net.paploo.goi.persistence.db.goi.source.tables.Source

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SourceRecord() : UpdatableRecordImpl<SourceRecord>(Source.SOURCE_), Record4<String?, String?, String?, String?> {

    open var code: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var label: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var url: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var description: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, String?> = super.fieldsRow() as Row4<String?, String?, String?, String?>
    override fun valuesRow(): Row4<String?, String?, String?, String?> = super.valuesRow() as Row4<String?, String?, String?, String?>
    override fun field1(): Field<String?> = Source.SOURCE_.CODE
    override fun field2(): Field<String?> = Source.SOURCE_.LABEL
    override fun field3(): Field<String?> = Source.SOURCE_.URL
    override fun field4(): Field<String?> = Source.SOURCE_.DESCRIPTION
    override fun component1(): String? = code
    override fun component2(): String? = label
    override fun component3(): String? = url
    override fun component4(): String? = description
    override fun value1(): String? = code
    override fun value2(): String? = label
    override fun value3(): String? = url
    override fun value4(): String? = description

    override fun value1(value: String?): SourceRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): SourceRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): SourceRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): SourceRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?): SourceRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SourceRecord
     */
    constructor(code: String? = null, label: String? = null, url: String? = null, description: String? = null): this() {
        this.code = code
        this.label = label
        this.url = url
        this.description = description
        resetChangedOnNotNull()
    }
}
