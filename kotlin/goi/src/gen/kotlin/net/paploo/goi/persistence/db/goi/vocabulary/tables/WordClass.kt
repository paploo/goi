/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.function.Function

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.keys.WORD_CLASS_PKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.WordClassRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WordClass(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WordClassRecord>?,
    aliased: Table<WordClassRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WordClassRecord>(
    alias,
    Vocabulary.VOCABULARY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.word_class</code>
         */
        val WORD_CLASS: WordClass = WordClass()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WordClassRecord> = WordClassRecord::class.java

    /**
     * The column <code>vocabulary.word_class.code</code>.
     */
    val CODE: TableField<WordClassRecord, String?> = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>vocabulary.word_class.label</code>.
     */
    val LABEL: TableField<WordClassRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<WordClassRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WordClassRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>vocabulary.word_class</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.word_class</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.word_class</code> table reference
     */
    constructor(): this(DSL.name("word_class"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WordClassRecord>): this(Internal.createPathAlias(child, key), child, key, WORD_CLASS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getPrimaryKey(): UniqueKey<WordClassRecord> = WORD_CLASS_PKEY
    override fun `as`(alias: String): WordClass = WordClass(DSL.name(alias), this)
    override fun `as`(alias: Name): WordClass = WordClass(alias, this)
    override fun `as`(alias: Table<*>): WordClass = WordClass(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WordClass = WordClass(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WordClass = WordClass(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WordClass = WordClass(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
