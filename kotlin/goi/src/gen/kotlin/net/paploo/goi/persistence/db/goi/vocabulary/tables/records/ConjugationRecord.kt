/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables.records


import java.util.UUID

import net.paploo.goi.persistence.db.goi.vocabulary.tables.Conjugation

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ConjugationRecord() : UpdatableRecordImpl<ConjugationRecord>(Conjugation.CONJUGATION), Record7<UUID?, UUID?, String?, String?, String?, Int?, String?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var conjugationSetId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var politenessCode: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var chargeCode: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var formCode: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var sortRank: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var value: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<UUID?, UUID?, String?, String?, String?, Int?, String?> = super.fieldsRow() as Row7<UUID?, UUID?, String?, String?, String?, Int?, String?>
    override fun valuesRow(): Row7<UUID?, UUID?, String?, String?, String?, Int?, String?> = super.valuesRow() as Row7<UUID?, UUID?, String?, String?, String?, Int?, String?>
    override fun field1(): Field<UUID?> = Conjugation.CONJUGATION.ID
    override fun field2(): Field<UUID?> = Conjugation.CONJUGATION.CONJUGATION_SET_ID
    override fun field3(): Field<String?> = Conjugation.CONJUGATION.POLITENESS_CODE
    override fun field4(): Field<String?> = Conjugation.CONJUGATION.CHARGE_CODE
    override fun field5(): Field<String?> = Conjugation.CONJUGATION.FORM_CODE
    override fun field6(): Field<Int?> = Conjugation.CONJUGATION.SORT_RANK
    override fun field7(): Field<String?> = Conjugation.CONJUGATION.VALUE
    override fun component1(): UUID? = id
    override fun component2(): UUID? = conjugationSetId
    override fun component3(): String? = politenessCode
    override fun component4(): String? = chargeCode
    override fun component5(): String? = formCode
    override fun component6(): Int? = sortRank
    override fun component7(): String? = value
    override fun value1(): UUID? = id
    override fun value2(): UUID? = conjugationSetId
    override fun value3(): String? = politenessCode
    override fun value4(): String? = chargeCode
    override fun value5(): String? = formCode
    override fun value6(): Int? = sortRank
    override fun value7(): String? = value

    override fun value1(value: UUID?): ConjugationRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): ConjugationRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): ConjugationRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): ConjugationRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): ConjugationRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Int?): ConjugationRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): ConjugationRecord {
        set(6, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: String?, value4: String?, value5: String?, value6: Int?, value7: String?): ConjugationRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised ConjugationRecord
     */
    constructor(id: UUID? = null, conjugationSetId: UUID? = null, politenessCode: String? = null, chargeCode: String? = null, formCode: String? = null, sortRank: Int? = null, value: String? = null): this() {
        this.id = id
        this.conjugationSetId = conjugationSetId
        this.politenessCode = politenessCode
        this.chargeCode = chargeCode
        this.formCode = formCode
        this.sortRank = sortRank
        this.value = value
        resetChangedOnNotNull()
    }
}
