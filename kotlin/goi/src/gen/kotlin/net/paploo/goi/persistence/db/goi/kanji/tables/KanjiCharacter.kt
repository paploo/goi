/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.kanji.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.kanji.Kanji
import net.paploo.goi.persistence.db.goi.kanji.indexes.KANJI_CHARACTER_CHARACTER_IDX
import net.paploo.goi.persistence.db.goi.kanji.indexes.KANJI_CHARACTER_KUN_READINGS_IDX
import net.paploo.goi.persistence.db.goi.kanji.indexes.KANJI_CHARACTER_MEANINGS_IDX
import net.paploo.goi.persistence.db.goi.kanji.indexes.KANJI_CHARACTER_ON_READINGS_IDX
import net.paploo.goi.persistence.db.goi.kanji.keys.KANJI_CHARACTER_PKEY
import net.paploo.goi.persistence.db.goi.kanji.tables.records.KanjiCharacterRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KanjiCharacter(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, KanjiCharacterRecord>?,
    aliased: Table<KanjiCharacterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<KanjiCharacterRecord>(
    alias,
    Kanji.KANJI,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>kanji.kanji_character</code>
         */
        val KANJI_CHARACTER: KanjiCharacter = KanjiCharacter()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<KanjiCharacterRecord> = KanjiCharacterRecord::class.java

    /**
     * The column <code>kanji.kanji_character.id</code>.
     */
    val ID: TableField<KanjiCharacterRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>kanji.kanji_character.character</code>.
     */
    val CHARACTER: TableField<KanjiCharacterRecord, String?> = createField(DSL.name("character"), SQLDataType.CHAR(1).nullable(false), this, "")

    /**
     * The column <code>kanji.kanji_character.unicode_code_point</code>.
     */
    val UNICODE_CODE_POINT: TableField<KanjiCharacterRecord, Int?> = createField(DSL.name("unicode_code_point"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>kanji.kanji_character.meanings</code>.
     */
    val MEANINGS: TableField<KanjiCharacterRecord, Array<String?>?> = createField(DSL.name("meanings"), SQLDataType.CLOB.nullable(false).array(), this, "")

    /**
     * The column <code>kanji.kanji_character.on_readings</code>.
     */
    val ON_READINGS: TableField<KanjiCharacterRecord, Array<String?>?> = createField(DSL.name("on_readings"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB)).array(), this, "")

    /**
     * The column <code>kanji.kanji_character.kun_readings</code>.
     */
    val KUN_READINGS: TableField<KanjiCharacterRecord, Array<String?>?> = createField(DSL.name("kun_readings"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB)).array(), this, "")

    /**
     * The column <code>kanji.kanji_character.nanori_readings</code>.
     */
    val NANORI_READINGS: TableField<KanjiCharacterRecord, Array<String?>?> = createField(DSL.name("nanori_readings"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB)).array(), this, "")

    /**
     * The column <code>kanji.kanji_character.stroke_count</code>.
     */
    val STROKE_COUNT: TableField<KanjiCharacterRecord, Int?> = createField(DSL.name("stroke_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>kanji.kanji_character.jlpt_level</code>.
     */
    val JLPT_LEVEL: TableField<KanjiCharacterRecord, Int?> = createField(DSL.name("jlpt_level"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>kanji.kanji_character.grade_level</code>.
     */
    val GRADE_LEVEL: TableField<KanjiCharacterRecord, Int?> = createField(DSL.name("grade_level"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>kanji.kanji_character.frequency_ranking</code>.
     */
    val FREQUENCY_RANKING: TableField<KanjiCharacterRecord, Int?> = createField(DSL.name("frequency_ranking"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<KanjiCharacterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<KanjiCharacterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>kanji.kanji_character</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>kanji.kanji_character</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>kanji.kanji_character</code> table reference
     */
    constructor(): this(DSL.name("kanji_character"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, KanjiCharacterRecord>): this(Internal.createPathAlias(child, key), child, key, KANJI_CHARACTER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Kanji.KANJI
    override fun getIndexes(): List<Index> = listOf(KANJI_CHARACTER_CHARACTER_IDX, KANJI_CHARACTER_KUN_READINGS_IDX, KANJI_CHARACTER_MEANINGS_IDX, KANJI_CHARACTER_ON_READINGS_IDX)
    override fun getPrimaryKey(): UniqueKey<KanjiCharacterRecord> = KANJI_CHARACTER_PKEY
    override fun `as`(alias: String): KanjiCharacter = KanjiCharacter(DSL.name(alias), this)
    override fun `as`(alias: Name): KanjiCharacter = KanjiCharacter(alias, this)
    override fun `as`(alias: Table<*>): KanjiCharacter = KanjiCharacter(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KanjiCharacter = KanjiCharacter(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KanjiCharacter = KanjiCharacter(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): KanjiCharacter = KanjiCharacter(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<UUID?, String?, Int?, Array<String?>?, Array<String?>?, Array<String?>?, Array<String?>?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row11<UUID?, String?, Int?, Array<String?>?, Array<String?>?, Array<String?>?, Array<String?>?, Int?, Int?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, Int?, Array<String?>?, Array<String?>?, Array<String?>?, Array<String?>?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, Int?, Array<String?>?, Array<String?>?, Array<String?>?, Array<String?>?, Int?, Int?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
