/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.vocabulary.Vocabulary
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.DEFINITION_VALUE_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.DEFINITION_VOCABULARY_ID_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.indexes.DEFINITION_VOCABULARY_ID_ID_IDX
import net.paploo.goi.persistence.db.goi.vocabulary.keys.DEFINITION_PKEY
import net.paploo.goi.persistence.db.goi.vocabulary.keys.DEFINITION__DEFINITION_VOCABULARY_ID_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.records.DefinitionRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Definition(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DefinitionRecord>?,
    aliased: Table<DefinitionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DefinitionRecord>(
    alias,
    Vocabulary.VOCABULARY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>vocabulary.definition</code>
         */
        val DEFINITION: Definition = Definition()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DefinitionRecord> = DefinitionRecord::class.java

    /**
     * The column <code>vocabulary.definition.id</code>.
     */
    val ID: TableField<DefinitionRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.definition.vocabulary_id</code>.
     */
    val VOCABULARY_ID: TableField<DefinitionRecord, UUID?> = createField(DSL.name("vocabulary_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>vocabulary.definition.sort_rank</code>.
     */
    val SORT_RANK: TableField<DefinitionRecord, Int?> = createField(DSL.name("sort_rank"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>vocabulary.definition.value</code>.
     */
    val VALUE: TableField<DefinitionRecord, String?> = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DefinitionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DefinitionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>vocabulary.definition</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>vocabulary.definition</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>vocabulary.definition</code> table reference
     */
    constructor(): this(DSL.name("definition"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DefinitionRecord>): this(Internal.createPathAlias(child, key), child, key, DEFINITION, null)
    override fun getSchema(): Schema? = if (aliased()) null else Vocabulary.VOCABULARY
    override fun getIndexes(): List<Index> = listOf(DEFINITION_VALUE_IDX, DEFINITION_VOCABULARY_ID_ID_IDX, DEFINITION_VOCABULARY_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<DefinitionRecord> = DEFINITION_PKEY
    override fun getReferences(): List<ForeignKey<DefinitionRecord, *>> = listOf(DEFINITION__DEFINITION_VOCABULARY_ID_FKEY)

    private lateinit var _vocabulary: net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary

    /**
     * Get the implicit join path to the <code>vocabulary.vocabulary</code>
     * table.
     */
    fun vocabulary(): net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary {
        if (!this::_vocabulary.isInitialized)
            _vocabulary = net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary(this, DEFINITION__DEFINITION_VOCABULARY_ID_FKEY)

        return _vocabulary;
    }

    val vocabulary: net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary
        get(): net.paploo.goi.persistence.db.goi.vocabulary.tables.Vocabulary = vocabulary()
    override fun `as`(alias: String): Definition = Definition(DSL.name(alias), this)
    override fun `as`(alias: Name): Definition = Definition(alias, this)
    override fun `as`(alias: Table<*>): Definition = Definition(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Definition = Definition(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Definition = Definition(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Definition = Definition(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<UUID?, UUID?, Int?, String?> = super.fieldsRow() as Row4<UUID?, UUID?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
