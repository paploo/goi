/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_REFERENCE_EXAMPLE_ID_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_REFERENCE_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.records.ExampleReferenceRecord
import net.paploo.goi.persistence.db.goi.source.tables.Lesson

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ExampleReference(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ExampleReferenceRecord>?,
    aliased: Table<ExampleReferenceRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ExampleReferenceRecord>(
    alias,
    Grammar.GRAMMAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>grammar.example_reference</code>
         */
        val EXAMPLE_REFERENCE: ExampleReference = ExampleReference()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExampleReferenceRecord> = ExampleReferenceRecord::class.java

    /**
     * The column <code>grammar.example_reference.example_id</code>.
     */
    val EXAMPLE_ID: TableField<ExampleReferenceRecord, UUID?> = createField(DSL.name("example_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example_reference.lesson_code</code>.
     */
    val LESSON_CODE: TableField<ExampleReferenceRecord, String?> = createField(DSL.name("lesson_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>grammar.example_reference</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.example_reference</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.example_reference</code> table reference
     */
    constructor(): this(DSL.name("example_reference"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ExampleReferenceRecord>): this(Internal.createPathAlias(child, key), child, key, EXAMPLE_REFERENCE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getIndexes(): List<Index> = listOf(EXAMPLE_REFERENCE_EXAMPLE_ID_LESSON_CODE_IDX, EXAMPLE_REFERENCE_LESSON_CODE_IDX)
    override fun getReferences(): List<ForeignKey<ExampleReferenceRecord, *>> = listOf(EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY)

    private lateinit var _example: Example
    private lateinit var _lesson: Lesson

    /**
     * Get the implicit join path to the <code>grammar.example</code> table.
     */
    fun example(): Example {
        if (!this::_example.isInitialized)
            _example = Example(this, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY)

        return _example;
    }

    val example: Example
        get(): Example = example()

    /**
     * Get the implicit join path to the <code>source.lesson</code> table.
     */
    fun lesson(): Lesson {
        if (!this::_lesson.isInitialized)
            _lesson = Lesson(this, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY)

        return _lesson;
    }

    val lesson: Lesson
        get(): Lesson = lesson()
    override fun `as`(alias: String): ExampleReference = ExampleReference(DSL.name(alias), this)
    override fun `as`(alias: Name): ExampleReference = ExampleReference(alias, this)
    override fun `as`(alias: Table<*>): ExampleReference = ExampleReference(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ExampleReference = ExampleReference(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ExampleReference = ExampleReference(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ExampleReference = ExampleReference(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<UUID?, String?> = super.fieldsRow() as Row2<UUID?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
