/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_REFERENCE_EXAMPLE_ID_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_REFERENCE_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.Example.ExamplePath
import net.paploo.goi.persistence.db.goi.grammar.tables.records.ExampleReferenceRecord
import net.paploo.goi.persistence.db.goi.source.tables.Lesson.LessonPath

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ExampleReference(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ExampleReferenceRecord>?,
    parentPath: InverseForeignKey<out Record, ExampleReferenceRecord>?,
    aliased: Table<ExampleReferenceRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ExampleReferenceRecord>(
    alias,
    Grammar.GRAMMAR,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>grammar.example_reference</code>
         */
        val EXAMPLE_REFERENCE: ExampleReference = ExampleReference()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExampleReferenceRecord> = ExampleReferenceRecord::class.java

    /**
     * The column <code>grammar.example_reference.example_id</code>.
     */
    val EXAMPLE_ID: TableField<ExampleReferenceRecord, UUID?> = createField(DSL.name("example_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example_reference.lesson_code</code>.
     */
    val LESSON_CODE: TableField<ExampleReferenceRecord, String?> = createField(DSL.name("lesson_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>grammar.example_reference</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.example_reference</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.example_reference</code> table reference
     */
    constructor(): this(DSL.name("example_reference"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExampleReferenceRecord>?, parentPath: InverseForeignKey<out Record, ExampleReferenceRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EXAMPLE_REFERENCE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ExampleReferencePath : ExampleReference, Path<ExampleReferenceRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExampleReferenceRecord>?, parentPath: InverseForeignKey<out Record, ExampleReferenceRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ExampleReferenceRecord>): super(alias, aliased)
        override fun `as`(alias: String): ExampleReferencePath = ExampleReferencePath(DSL.name(alias), this)
        override fun `as`(alias: Name): ExampleReferencePath = ExampleReferencePath(alias, this)
        override fun `as`(alias: Table<*>): ExampleReferencePath = ExampleReferencePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getIndexes(): List<Index> = listOf(EXAMPLE_REFERENCE_EXAMPLE_ID_LESSON_CODE_IDX, EXAMPLE_REFERENCE_LESSON_CODE_IDX)
    override fun getReferences(): List<ForeignKey<ExampleReferenceRecord, *>> = listOf(EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY)

    /**
     * Get the implicit join path to the <code>grammar.example</code> table.
     */
    fun example(): ExamplePath = example
    val example: ExamplePath by lazy { ExamplePath(this, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>source.lesson</code> table.
     */
    fun lesson(): LessonPath = lesson
    val lesson: LessonPath by lazy { LessonPath(this, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY, null) }
    override fun `as`(alias: String): ExampleReference = ExampleReference(DSL.name(alias), this)
    override fun `as`(alias: Name): ExampleReference = ExampleReference(alias, this)
    override fun `as`(alias: Table<*>): ExampleReference = ExampleReference(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ExampleReference = ExampleReference(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ExampleReference = ExampleReference(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ExampleReference = ExampleReference(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ExampleReference = ExampleReference(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ExampleReference = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ExampleReference = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ExampleReference = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ExampleReference = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ExampleReference = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ExampleReference = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ExampleReference = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ExampleReference = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ExampleReference = where(DSL.notExists(select))
}
