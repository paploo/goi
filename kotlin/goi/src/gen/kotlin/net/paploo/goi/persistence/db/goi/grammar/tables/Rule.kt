/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.time.LocalDate
import java.util.UUID

import kotlin.collections.Collection

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE__EXAMPLE_RULE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_PKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_REFERENCE__RULE_REFERENCE_RULE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.Example.ExamplePath
import net.paploo.goi.persistence.db.goi.grammar.tables.RuleReference.RuleReferencePath
import net.paploo.goi.persistence.db.goi.grammar.tables.records.RuleRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Rule(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RuleRecord>?,
    parentPath: InverseForeignKey<out Record, RuleRecord>?,
    aliased: Table<RuleRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RuleRecord>(
    alias,
    Grammar.GRAMMAR,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>grammar.rule</code>
         */
        val RULE: Rule = Rule()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RuleRecord> = RuleRecord::class.java

    /**
     * The column <code>grammar.rule.id</code>.
     */
    val ID: TableField<RuleRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.meaning</code>.
     */
    val MEANING: TableField<RuleRecord, String?> = createField(DSL.name("meaning"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.title_preferred_spelling</code>.
     */
    val TITLE_PREFERRED_SPELLING: TableField<RuleRecord, String?> = createField(DSL.name("title_preferred_spelling"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.title_phonetic_spelling</code>.
     */
    val TITLE_PHONETIC_SPELLING: TableField<RuleRecord, String?> = createField(DSL.name("title_phonetic_spelling"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.rule.title_furigana_template</code>.
     */
    val TITLE_FURIGANA_TEMPLATE: TableField<RuleRecord, String?> = createField(DSL.name("title_furigana_template"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.rule.how_to_use</code>.
     */
    val HOW_TO_USE: TableField<RuleRecord, Array<String?>?> = createField(DSL.name("how_to_use"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>grammar.rule.jlpt_level</code>.
     */
    val JLPT_LEVEL: TableField<RuleRecord, Int?> = createField(DSL.name("jlpt_level"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grammar.rule.row_num</code>.
     */
    val ROW_NUM: TableField<RuleRecord, Int?> = createField(DSL.name("row_num"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.date_added</code>.
     */
    val DATE_ADDED: TableField<RuleRecord, LocalDate?> = createField(DSL.name("date_added"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.tags</code>.
     */
    val TAGS: TableField<RuleRecord, Array<String?>?> = createField(DSL.name("tags"), SQLDataType.VARCHAR.array().defaultValue(DSL.field(DSL.raw("'{}'::character varying[]"), SQLDataType.VARCHAR.array())), this, "")

    private constructor(alias: Name, aliased: Table<RuleRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RuleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RuleRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>grammar.rule</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.rule</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.rule</code> table reference
     */
    constructor(): this(DSL.name("rule"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RuleRecord>?, parentPath: InverseForeignKey<out Record, RuleRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RULE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RulePath : Rule, Path<RuleRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RuleRecord>?, parentPath: InverseForeignKey<out Record, RuleRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RuleRecord>): super(alias, aliased)
        override fun `as`(alias: String): RulePath = RulePath(DSL.name(alias), this)
        override fun `as`(alias: Name): RulePath = RulePath(alias, this)
        override fun `as`(alias: Table<*>): RulePath = RulePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getPrimaryKey(): UniqueKey<RuleRecord> = RULE_PKEY

    private lateinit var _example: ExamplePath

    /**
     * Get the implicit to-many join path to the <code>grammar.example</code>
     * table
     */
    fun example(): ExamplePath {
        if (!this::_example.isInitialized)
            _example = ExamplePath(this, null, EXAMPLE__EXAMPLE_RULE_ID_FKEY.inverseKey)

        return _example;
    }

    val example: ExamplePath
        get(): ExamplePath = example()

    private lateinit var _ruleReference: RuleReferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>grammar.rule_reference</code> table
     */
    fun ruleReference(): RuleReferencePath {
        if (!this::_ruleReference.isInitialized)
            _ruleReference = RuleReferencePath(this, null, RULE_REFERENCE__RULE_REFERENCE_RULE_ID_FKEY.inverseKey)

        return _ruleReference;
    }

    val ruleReference: RuleReferencePath
        get(): RuleReferencePath = ruleReference()
    override fun `as`(alias: String): Rule = Rule(DSL.name(alias), this)
    override fun `as`(alias: Name): Rule = Rule(alias, this)
    override fun `as`(alias: Table<*>): Rule = Rule(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Rule = Rule(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Rule = Rule(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Rule = Rule(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Rule = Rule(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Rule = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Rule = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Rule = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Rule = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Rule = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Rule = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Rule = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Rule = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Rule = where(DSL.notExists(select))
}
