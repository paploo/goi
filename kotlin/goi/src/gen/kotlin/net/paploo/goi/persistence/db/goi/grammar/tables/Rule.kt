/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.time.LocalDate
import java.util.UUID
import java.util.function.Function

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_PKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.records.RuleRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Rule(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RuleRecord>?,
    aliased: Table<RuleRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RuleRecord>(
    alias,
    Grammar.GRAMMAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>grammar.rule</code>
         */
        val RULE: Rule = Rule()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RuleRecord> = RuleRecord::class.java

    /**
     * The column <code>grammar.rule.id</code>.
     */
    val ID: TableField<RuleRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.meaning</code>.
     */
    val MEANING: TableField<RuleRecord, String?> = createField(DSL.name("meaning"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.title_preferred_spelling</code>.
     */
    val TITLE_PREFERRED_SPELLING: TableField<RuleRecord, String?> = createField(DSL.name("title_preferred_spelling"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.title_phonetic_spelling</code>.
     */
    val TITLE_PHONETIC_SPELLING: TableField<RuleRecord, String?> = createField(DSL.name("title_phonetic_spelling"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.rule.title_furigana_template</code>.
     */
    val TITLE_FURIGANA_TEMPLATE: TableField<RuleRecord, String?> = createField(DSL.name("title_furigana_template"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.rule.how_to_use</code>.
     */
    val HOW_TO_USE: TableField<RuleRecord, Array<String?>?> = createField(DSL.name("how_to_use"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>grammar.rule.jlpt_level</code>.
     */
    val JLPT_LEVEL: TableField<RuleRecord, Int?> = createField(DSL.name("jlpt_level"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grammar.rule.row_num</code>.
     */
    val ROW_NUM: TableField<RuleRecord, Int?> = createField(DSL.name("row_num"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.date_added</code>.
     */
    val DATE_ADDED: TableField<RuleRecord, LocalDate?> = createField(DSL.name("date_added"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>grammar.rule.tags</code>.
     */
    val TAGS: TableField<RuleRecord, Array<String?>?> = createField(DSL.name("tags"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("'{}'::character varying[]"), SQLDataType.VARCHAR)).array(), this, "")

    private constructor(alias: Name, aliased: Table<RuleRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RuleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>grammar.rule</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.rule</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.rule</code> table reference
     */
    constructor(): this(DSL.name("rule"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RuleRecord>): this(Internal.createPathAlias(child, key), child, key, RULE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getPrimaryKey(): UniqueKey<RuleRecord> = RULE_PKEY
    override fun `as`(alias: String): Rule = Rule(DSL.name(alias), this)
    override fun `as`(alias: Name): Rule = Rule(alias, this)
    override fun `as`(alias: Table<*>): Rule = Rule(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Rule = Rule(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Rule = Rule(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Rule = Rule(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?> = super.fieldsRow() as Row10<UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, String?, String?, String?, Array<String?>?, Int?, Int?, LocalDate?, Array<String?>?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
