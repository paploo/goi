/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables.records


import java.util.UUID

import net.paploo.goi.persistence.db.goi.vocabulary.tables.Spelling

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpellingRecord() : UpdatableRecordImpl<SpellingRecord>(Spelling.SPELLING), Record4<UUID?, UUID?, String?, String?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var vocabularyId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var spellingKindCode: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var value: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UUID?, UUID?, String?, String?> = super.fieldsRow() as Row4<UUID?, UUID?, String?, String?>
    override fun valuesRow(): Row4<UUID?, UUID?, String?, String?> = super.valuesRow() as Row4<UUID?, UUID?, String?, String?>
    override fun field1(): Field<UUID?> = Spelling.SPELLING.ID
    override fun field2(): Field<UUID?> = Spelling.SPELLING.VOCABULARY_ID
    override fun field3(): Field<String?> = Spelling.SPELLING.SPELLING_KIND_CODE
    override fun field4(): Field<String?> = Spelling.SPELLING.VALUE
    override fun component1(): UUID? = id
    override fun component2(): UUID? = vocabularyId
    override fun component3(): String? = spellingKindCode
    override fun component4(): String? = value
    override fun value1(): UUID? = id
    override fun value2(): UUID? = vocabularyId
    override fun value3(): String? = spellingKindCode
    override fun value4(): String? = value

    override fun value1(value: UUID?): SpellingRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): SpellingRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): SpellingRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): SpellingRecord {
        set(3, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: String?, value4: String?): SpellingRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised SpellingRecord
     */
    constructor(id: UUID? = null, vocabularyId: UUID? = null, spellingKindCode: String? = null, value: String? = null): this() {
        this.id = id
        this.vocabularyId = vocabularyId
        this.spellingKindCode = spellingKindCode
        this.value = value
        resetChangedOnNotNull()
    }
}
