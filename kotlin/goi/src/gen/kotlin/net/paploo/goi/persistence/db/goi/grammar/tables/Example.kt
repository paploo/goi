/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_RULE_ID_IDX
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_PKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE__EXAMPLE_RULE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.records.ExampleRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Example(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ExampleRecord>?,
    aliased: Table<ExampleRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ExampleRecord>(
    alias,
    Grammar.GRAMMAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>grammar.example</code>
         */
        val EXAMPLE: Example = Example()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExampleRecord> = ExampleRecord::class.java

    /**
     * The column <code>grammar.example.id</code>.
     */
    val ID: TableField<ExampleRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example.rule_id</code>.
     */
    val RULE_ID: TableField<ExampleRecord, UUID?> = createField(DSL.name("rule_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example.meaning</code>.
     */
    val MEANING: TableField<ExampleRecord, String?> = createField(DSL.name("meaning"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.example.text_preferred_spelling</code>.
     */
    val TEXT_PREFERRED_SPELLING: TableField<ExampleRecord, String?> = createField(DSL.name("text_preferred_spelling"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.example.text_phonetic_spelling</code>.
     */
    val TEXT_PHONETIC_SPELLING: TableField<ExampleRecord, String?> = createField(DSL.name("text_phonetic_spelling"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.example.text_furigana_template</code>.
     */
    val TEXT_FURIGANA_TEMPLATE: TableField<ExampleRecord, String?> = createField(DSL.name("text_furigana_template"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.example.sort_rank</code>.
     */
    val SORT_RANK: TableField<ExampleRecord, Int?> = createField(DSL.name("sort_rank"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grammar.example.tags</code>.
     */
    val TAGS: TableField<ExampleRecord, Array<String?>?> = createField(DSL.name("tags"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("'{}'::character varying[]"), SQLDataType.VARCHAR)).array(), this, "")

    private constructor(alias: Name, aliased: Table<ExampleRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ExampleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>grammar.example</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.example</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.example</code> table reference
     */
    constructor(): this(DSL.name("example"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ExampleRecord>): this(Internal.createPathAlias(child, key), child, key, EXAMPLE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getIndexes(): List<Index> = listOf(EXAMPLE_RULE_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<ExampleRecord> = EXAMPLE_PKEY
    override fun getReferences(): List<ForeignKey<ExampleRecord, *>> = listOf(EXAMPLE__EXAMPLE_RULE_ID_FKEY)

    private lateinit var _rule: Rule

    /**
     * Get the implicit join path to the <code>grammar.rule</code> table.
     */
    fun rule(): Rule {
        if (!this::_rule.isInitialized)
            _rule = Rule(this, EXAMPLE__EXAMPLE_RULE_ID_FKEY)

        return _rule;
    }

    val rule: Rule
        get(): Rule = rule()
    override fun `as`(alias: String): Example = Example(DSL.name(alias), this)
    override fun `as`(alias: Name): Example = Example(alias, this)
    override fun `as`(alias: Table<*>): Example = Example(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Example = Example(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Example = Example(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Example = Example(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<UUID?, UUID?, String?, String?, String?, String?, Int?, Array<String?>?> = super.fieldsRow() as Row8<UUID?, UUID?, String?, String?, String?, String?, Int?, Array<String?>?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, String?, String?, String?, String?, Int?, Array<String?>?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, String?, String?, String?, String?, Int?, Array<String?>?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
