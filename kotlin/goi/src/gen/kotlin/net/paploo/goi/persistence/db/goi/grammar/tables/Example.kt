/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.indexes.EXAMPLE_RULE_ID_IDX
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_PKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE__EXAMPLE_RULE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.ExampleReference.ExampleReferencePath
import net.paploo.goi.persistence.db.goi.grammar.tables.Rule.RulePath
import net.paploo.goi.persistence.db.goi.grammar.tables.records.ExampleRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Example(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ExampleRecord>?,
    parentPath: InverseForeignKey<out Record, ExampleRecord>?,
    aliased: Table<ExampleRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ExampleRecord>(
    alias,
    Grammar.GRAMMAR,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>grammar.example</code>
         */
        val EXAMPLE: Example = Example()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExampleRecord> = ExampleRecord::class.java

    /**
     * The column <code>grammar.example.id</code>.
     */
    val ID: TableField<ExampleRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example.rule_id</code>.
     */
    val RULE_ID: TableField<ExampleRecord, UUID?> = createField(DSL.name("rule_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.example.meaning</code>.
     */
    val MEANING: TableField<ExampleRecord, String?> = createField(DSL.name("meaning"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.example.text_preferred_spelling</code>.
     */
    val TEXT_PREFERRED_SPELLING: TableField<ExampleRecord, String?> = createField(DSL.name("text_preferred_spelling"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>grammar.example.text_phonetic_spelling</code>.
     */
    val TEXT_PHONETIC_SPELLING: TableField<ExampleRecord, String?> = createField(DSL.name("text_phonetic_spelling"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.example.text_furigana_template</code>.
     */
    val TEXT_FURIGANA_TEMPLATE: TableField<ExampleRecord, String?> = createField(DSL.name("text_furigana_template"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>grammar.example.sort_rank</code>.
     */
    val SORT_RANK: TableField<ExampleRecord, Int?> = createField(DSL.name("sort_rank"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>grammar.example.tags</code>.
     */
    val TAGS: TableField<ExampleRecord, Array<String?>?> = createField(DSL.name("tags"), SQLDataType.VARCHAR.array().defaultValue(DSL.field(DSL.raw("'{}'::character varying[]"), SQLDataType.VARCHAR.array())), this, "")

    private constructor(alias: Name, aliased: Table<ExampleRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ExampleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ExampleRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>grammar.example</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.example</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.example</code> table reference
     */
    constructor(): this(DSL.name("example"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExampleRecord>?, parentPath: InverseForeignKey<out Record, ExampleRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EXAMPLE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ExamplePath : Example, Path<ExampleRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ExampleRecord>?, parentPath: InverseForeignKey<out Record, ExampleRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ExampleRecord>): super(alias, aliased)
        override fun `as`(alias: String): ExamplePath = ExamplePath(DSL.name(alias), this)
        override fun `as`(alias: Name): ExamplePath = ExamplePath(alias, this)
        override fun `as`(alias: Table<*>): ExamplePath = ExamplePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getIndexes(): List<Index> = listOf(EXAMPLE_RULE_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<ExampleRecord> = EXAMPLE_PKEY
    override fun getReferences(): List<ForeignKey<ExampleRecord, *>> = listOf(EXAMPLE__EXAMPLE_RULE_ID_FKEY)

    private lateinit var _rule: RulePath

    /**
     * Get the implicit join path to the <code>grammar.rule</code> table.
     */
    fun rule(): RulePath {
        if (!this::_rule.isInitialized)
            _rule = RulePath(this, EXAMPLE__EXAMPLE_RULE_ID_FKEY, null)

        return _rule;
    }

    val rule: RulePath
        get(): RulePath = rule()

    private lateinit var _exampleReference: ExampleReferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>grammar.example_reference</code> table
     */
    fun exampleReference(): ExampleReferencePath {
        if (!this::_exampleReference.isInitialized)
            _exampleReference = ExampleReferencePath(this, null, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_EXAMPLE_ID_FKEY.inverseKey)

        return _exampleReference;
    }

    val exampleReference: ExampleReferencePath
        get(): ExampleReferencePath = exampleReference()
    override fun `as`(alias: String): Example = Example(DSL.name(alias), this)
    override fun `as`(alias: Name): Example = Example(alias, this)
    override fun `as`(alias: Table<*>): Example = Example(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Example = Example(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Example = Example(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Example = Example(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Example = Example(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Example = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Example = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Example = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Example = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Example = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Example = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Example = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Example = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Example = where(DSL.notExists(select))
}
