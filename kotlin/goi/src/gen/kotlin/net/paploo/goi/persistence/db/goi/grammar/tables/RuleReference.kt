/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.grammar.tables


import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.Grammar
import net.paploo.goi.persistence.db.goi.grammar.indexes.RULE_REFERENCE_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.indexes.RULE_REFERENCE_RULE_ID_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_REFERENCE__RULE_REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_REFERENCE__RULE_REFERENCE_RULE_ID_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.records.RuleReferenceRecord
import net.paploo.goi.persistence.db.goi.source.tables.Lesson

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RuleReference(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RuleReferenceRecord>?,
    aliased: Table<RuleReferenceRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RuleReferenceRecord>(
    alias,
    Grammar.GRAMMAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>grammar.rule_reference</code>
         */
        val RULE_REFERENCE: RuleReference = RuleReference()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RuleReferenceRecord> = RuleReferenceRecord::class.java

    /**
     * The column <code>grammar.rule_reference.rule_id</code>.
     */
    val RULE_ID: TableField<RuleReferenceRecord, UUID?> = createField(DSL.name("rule_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>grammar.rule_reference.lesson_code</code>.
     */
    val LESSON_CODE: TableField<RuleReferenceRecord, String?> = createField(DSL.name("lesson_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RuleReferenceRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RuleReferenceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>grammar.rule_reference</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>grammar.rule_reference</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>grammar.rule_reference</code> table reference
     */
    constructor(): this(DSL.name("rule_reference"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RuleReferenceRecord>): this(Internal.createPathAlias(child, key), child, key, RULE_REFERENCE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Grammar.GRAMMAR
    override fun getIndexes(): List<Index> = listOf(RULE_REFERENCE_LESSON_CODE_IDX, RULE_REFERENCE_RULE_ID_LESSON_CODE_IDX)
    override fun getReferences(): List<ForeignKey<RuleReferenceRecord, *>> = listOf(RULE_REFERENCE__RULE_REFERENCE_RULE_ID_FKEY, RULE_REFERENCE__RULE_REFERENCE_LESSON_CODE_FKEY)

    private lateinit var _rule: Rule
    private lateinit var _lesson: Lesson

    /**
     * Get the implicit join path to the <code>grammar.rule</code> table.
     */
    fun rule(): Rule {
        if (!this::_rule.isInitialized)
            _rule = Rule(this, RULE_REFERENCE__RULE_REFERENCE_RULE_ID_FKEY)

        return _rule;
    }

    val rule: Rule
        get(): Rule = rule()

    /**
     * Get the implicit join path to the <code>source.lesson</code> table.
     */
    fun lesson(): Lesson {
        if (!this::_lesson.isInitialized)
            _lesson = Lesson(this, RULE_REFERENCE__RULE_REFERENCE_LESSON_CODE_FKEY)

        return _lesson;
    }

    val lesson: Lesson
        get(): Lesson = lesson()
    override fun `as`(alias: String): RuleReference = RuleReference(DSL.name(alias), this)
    override fun `as`(alias: Name): RuleReference = RuleReference(alias, this)
    override fun `as`(alias: Table<*>): RuleReference = RuleReference(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RuleReference = RuleReference(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RuleReference = RuleReference(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RuleReference = RuleReference(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<UUID?, String?> = super.fieldsRow() as Row2<UUID?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
