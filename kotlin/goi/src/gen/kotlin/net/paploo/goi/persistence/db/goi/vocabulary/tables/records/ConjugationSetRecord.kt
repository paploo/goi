/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.vocabulary.tables.records


import java.util.UUID

import net.paploo.goi.persistence.db.goi.vocabulary.tables.ConjugationSet

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ConjugationSetRecord() : UpdatableRecordImpl<ConjugationSetRecord>(ConjugationSet.CONJUGATION_SET), Record2<UUID?, UUID?> {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var vocabularyId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UUID?, UUID?> = super.fieldsRow() as Row2<UUID?, UUID?>
    override fun valuesRow(): Row2<UUID?, UUID?> = super.valuesRow() as Row2<UUID?, UUID?>
    override fun field1(): Field<UUID?> = ConjugationSet.CONJUGATION_SET.ID
    override fun field2(): Field<UUID?> = ConjugationSet.CONJUGATION_SET.VOCABULARY_ID
    override fun component1(): UUID? = id
    override fun component2(): UUID? = vocabularyId
    override fun value1(): UUID? = id
    override fun value2(): UUID? = vocabularyId

    override fun value1(value: UUID?): ConjugationSetRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): ConjugationSetRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?): ConjugationSetRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised ConjugationSetRecord
     */
    constructor(id: UUID? = null, vocabularyId: UUID? = null): this() {
        this.id = id
        this.vocabularyId = vocabularyId
        resetChangedOnNotNull()
    }
}
