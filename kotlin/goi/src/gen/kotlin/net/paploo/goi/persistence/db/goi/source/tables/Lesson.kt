/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.source.tables


import java.util.function.Function

import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.source.Source
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SECTION_NUMBER_SUBSECTION_NUMBER_IDX
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SOURCE_CODE_IDX
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SOURCE_CODE_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.source.keys.LESSON_PKEY
import net.paploo.goi.persistence.db.goi.source.keys.LESSON__LESSON_SOURCE_CODE_FKEY
import net.paploo.goi.persistence.db.goi.source.tables.records.LessonRecord

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Lesson(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LessonRecord>?,
    aliased: Table<LessonRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LessonRecord>(
    alias,
    Source.SOURCE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>source.lesson</code>
         */
        val LESSON: Lesson = Lesson()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LessonRecord> = LessonRecord::class.java

    /**
     * The column <code>source.lesson.code</code>.
     */
    val CODE: TableField<LessonRecord, String?> = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.lesson_code</code>.
     */
    val LESSON_CODE: TableField<LessonRecord, String?> = createField(DSL.name("lesson_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.source_code</code>.
     */
    val SOURCE_CODE: TableField<LessonRecord, String?> = createField(DSL.name("source_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.label</code>.
     */
    val LABEL: TableField<LessonRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>source.lesson.section_number</code>.
     */
    val SECTION_NUMBER: TableField<LessonRecord, Int?> = createField(DSL.name("section_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>source.lesson.subsection_number</code>.
     */
    val SUBSECTION_NUMBER: TableField<LessonRecord, Int?> = createField(DSL.name("subsection_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>source.lesson.url</code>.
     */
    val URL: TableField<LessonRecord, String?> = createField(DSL.name("url"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>source.lesson.description</code>.
     */
    val DESCRIPTION: TableField<LessonRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<LessonRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LessonRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>source.lesson</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>source.lesson</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>source.lesson</code> table reference
     */
    constructor(): this(DSL.name("lesson"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LessonRecord>): this(Internal.createPathAlias(child, key), child, key, LESSON, null)
    override fun getSchema(): Schema? = if (aliased()) null else Source.SOURCE
    override fun getIndexes(): List<Index> = listOf(LESSON_SECTION_NUMBER_SUBSECTION_NUMBER_IDX, LESSON_SOURCE_CODE_IDX, LESSON_SOURCE_CODE_LESSON_CODE_IDX)
    override fun getPrimaryKey(): UniqueKey<LessonRecord> = LESSON_PKEY
    override fun getReferences(): List<ForeignKey<LessonRecord, *>> = listOf(LESSON__LESSON_SOURCE_CODE_FKEY)

    private lateinit var _source: net.paploo.goi.persistence.db.goi.source.tables.Source

    /**
     * Get the implicit join path to the <code>source.source</code> table.
     */
    fun source(): net.paploo.goi.persistence.db.goi.source.tables.Source {
        if (!this::_source.isInitialized)
            _source = net.paploo.goi.persistence.db.goi.source.tables.Source(this, LESSON__LESSON_SOURCE_CODE_FKEY)

        return _source;
    }

    val source: net.paploo.goi.persistence.db.goi.source.tables.Source
        get(): net.paploo.goi.persistence.db.goi.source.tables.Source = source()
    override fun getChecks(): List<Check<LessonRecord>> = listOf(
        Internal.createCheck(this, DSL.name("lesson_check"), "(((code)::text = concat(source_code, '_', lesson_code)))", true)
    )
    override fun `as`(alias: String): Lesson = Lesson(DSL.name(alias), this)
    override fun `as`(alias: Name): Lesson = Lesson(alias, this)
    override fun `as`(alias: Table<*>): Lesson = Lesson(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Lesson = Lesson(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Lesson = Lesson(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Lesson = Lesson(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, String?, String?, Int?, Int?, String?, String?> = super.fieldsRow() as Row8<String?, String?, String?, String?, Int?, Int?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, String?, Int?, Int?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, String?, Int?, Int?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
