/*
 * This file is generated by jOOQ.
 */
package net.paploo.goi.persistence.db.goi.source.tables


import kotlin.collections.Collection
import kotlin.collections.List

import net.paploo.goi.persistence.db.goi.grammar.keys.EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.grammar.keys.RULE_REFERENCE__RULE_REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.grammar.tables.ExampleReference.ExampleReferencePath
import net.paploo.goi.persistence.db.goi.grammar.tables.RuleReference.RuleReferencePath
import net.paploo.goi.persistence.db.goi.source.Source
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SECTION_NUMBER_SUBSECTION_NUMBER_IDX
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SOURCE_CODE_IDX
import net.paploo.goi.persistence.db.goi.source.indexes.LESSON_SOURCE_CODE_LESSON_CODE_IDX
import net.paploo.goi.persistence.db.goi.source.keys.LESSON_PKEY
import net.paploo.goi.persistence.db.goi.source.keys.LESSON__LESSON_SOURCE_CODE_FKEY
import net.paploo.goi.persistence.db.goi.source.tables.Source.SourcePath
import net.paploo.goi.persistence.db.goi.source.tables.records.LessonRecord
import net.paploo.goi.persistence.db.goi.vocabulary.keys.REFERENCE__REFERENCE_LESSON_CODE_FKEY
import net.paploo.goi.persistence.db.goi.vocabulary.tables.Reference.ReferencePath

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Lesson(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LessonRecord>?,
    parentPath: InverseForeignKey<out Record, LessonRecord>?,
    aliased: Table<LessonRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<LessonRecord>(
    alias,
    Source.SOURCE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>source.lesson</code>
         */
        val LESSON: Lesson = Lesson()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LessonRecord> = LessonRecord::class.java

    /**
     * The column <code>source.lesson.code</code>.
     */
    val CODE: TableField<LessonRecord, String?> = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.lesson_code</code>.
     */
    val LESSON_CODE: TableField<LessonRecord, String?> = createField(DSL.name("lesson_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.source_code</code>.
     */
    val SOURCE_CODE: TableField<LessonRecord, String?> = createField(DSL.name("source_code"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>source.lesson.label</code>.
     */
    val LABEL: TableField<LessonRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>source.lesson.section_number</code>.
     */
    val SECTION_NUMBER: TableField<LessonRecord, Int?> = createField(DSL.name("section_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>source.lesson.subsection_number</code>.
     */
    val SUBSECTION_NUMBER: TableField<LessonRecord, Int?> = createField(DSL.name("subsection_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>source.lesson.url</code>.
     */
    val URL: TableField<LessonRecord, String?> = createField(DSL.name("url"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>source.lesson.description</code>.
     */
    val DESCRIPTION: TableField<LessonRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<LessonRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LessonRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LessonRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>source.lesson</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>source.lesson</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>source.lesson</code> table reference
     */
    constructor(): this(DSL.name("lesson"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LessonRecord>?, parentPath: InverseForeignKey<out Record, LessonRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, LESSON, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LessonPath : Lesson, Path<LessonRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LessonRecord>?, parentPath: InverseForeignKey<out Record, LessonRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<LessonRecord>): super(alias, aliased)
        override fun `as`(alias: String): LessonPath = LessonPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LessonPath = LessonPath(alias, this)
        override fun `as`(alias: Table<*>): LessonPath = LessonPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Source.SOURCE
    override fun getIndexes(): List<Index> = listOf(LESSON_SECTION_NUMBER_SUBSECTION_NUMBER_IDX, LESSON_SOURCE_CODE_IDX, LESSON_SOURCE_CODE_LESSON_CODE_IDX)
    override fun getPrimaryKey(): UniqueKey<LessonRecord> = LESSON_PKEY
    override fun getReferences(): List<ForeignKey<LessonRecord, *>> = listOf(LESSON__LESSON_SOURCE_CODE_FKEY)

    private lateinit var _source: SourcePath

    /**
     * Get the implicit join path to the <code>source.source</code> table.
     */
    fun source(): SourcePath {
        if (!this::_source.isInitialized)
            _source = SourcePath(this, LESSON__LESSON_SOURCE_CODE_FKEY, null)

        return _source;
    }

    val source: SourcePath
        get(): SourcePath = source()

    private lateinit var _exampleReference: ExampleReferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>grammar.example_reference</code> table
     */
    fun exampleReference(): ExampleReferencePath {
        if (!this::_exampleReference.isInitialized)
            _exampleReference = ExampleReferencePath(this, null, EXAMPLE_REFERENCE__EXAMPLE_REFERENCE_LESSON_CODE_FKEY.inverseKey)

        return _exampleReference;
    }

    val exampleReference: ExampleReferencePath
        get(): ExampleReferencePath = exampleReference()

    private lateinit var _ruleReference: RuleReferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>grammar.rule_reference</code> table
     */
    fun ruleReference(): RuleReferencePath {
        if (!this::_ruleReference.isInitialized)
            _ruleReference = RuleReferencePath(this, null, RULE_REFERENCE__RULE_REFERENCE_LESSON_CODE_FKEY.inverseKey)

        return _ruleReference;
    }

    val ruleReference: RuleReferencePath
        get(): RuleReferencePath = ruleReference()

    private lateinit var _reference: ReferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>vocabulary.reference</code> table
     */
    fun reference(): ReferencePath {
        if (!this::_reference.isInitialized)
            _reference = ReferencePath(this, null, REFERENCE__REFERENCE_LESSON_CODE_FKEY.inverseKey)

        return _reference;
    }

    val reference: ReferencePath
        get(): ReferencePath = reference()
    override fun getChecks(): List<Check<LessonRecord>> = listOf(
        Internal.createCheck(this, DSL.name("lesson_check"), "(((code)::text = concat(source_code, '_', lesson_code)))", true)
    )
    override fun `as`(alias: String): Lesson = Lesson(DSL.name(alias), this)
    override fun `as`(alias: Name): Lesson = Lesson(alias, this)
    override fun `as`(alias: Table<*>): Lesson = Lesson(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Lesson = Lesson(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Lesson = Lesson(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Lesson = Lesson(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Lesson = Lesson(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Lesson = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Lesson = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Lesson = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Lesson = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Lesson = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Lesson = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Lesson = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Lesson = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Lesson = where(DSL.notExists(select))
}
