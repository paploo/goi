package net.paploo.goi.persistence.anki.vocabulary

import net.paploo.goi.persistence.common.BaseVocabularyCsvRecord
import net.paploo.goi.persistence.common.CsvRecord
import org.apache.commons.csv.CSVRecord
import kotlin.enums.EnumEntries

internal data class VocabularyCsvRecord(
    val id: String?,
    val definition: String?,
    val preferredSpelling: String?,
    val phoneticSpelling: String?,
    val altSpelling: String?,
    val wordClass: String?,
    val conjugationKind: String?,
    val jlptLevel: String?,
    val dateAdded: String?,
    val rowNum: String?,
    val lessons: String?,
    val conjugations: Conjugations,
    val tags: String?,
) : BaseVocabularyCsvRecord<VocabularyCsvRecord, VocabularyCsvRecord.Field>() {

    constructor(csvRecord: CSVRecord) : this(
        id = csvRecord[Field.Id],
        definition = csvRecord[Field.Definition],
        preferredSpelling = csvRecord[Field.PreferredSpelling],
        phoneticSpelling = csvRecord[Field.PhoneticSpelling],
        altSpelling = csvRecord[Field.AltSpelling],
        wordClass = csvRecord[Field.WordClass],
        conjugationKind = csvRecord[Field.ConjugationKind],
        jlptLevel = csvRecord[Field.JlptLevel],
        dateAdded = csvRecord[Field.DateAdded],
        rowNum = csvRecord[Field.RowNum],
        lessons = csvRecord[Field.Lessons],
        conjugations = Conjugations(
            positivePlainPresent = csvRecord[Field.PositivePlainPresent],
            positivePlainPast = csvRecord[Field.PositivePlainPast],
            positivePlainTe = csvRecord[Field.PositivePlainTe],
            positivePlainConditionalEba = csvRecord[Field.PositivePlainConditionalEba],
            positivePlainConditionalTara = csvRecord[Field.PositivePlainConditionalTara],
            positivePlainPotential = csvRecord[Field.PositivePlainPotential],
            positivePlainPassive = csvRecord[Field.PositivePlainPassive],
            positivePlainCausative = csvRecord[Field.PositivePlainCausative],
            positivePlainImperative = csvRecord[Field.PositivePlainImperative],
            positivePolitePresent = csvRecord[Field.PositivePolitePresent],
            positivePolitePast = csvRecord[Field.PositivePolitePast],
            positivePoliteTe = csvRecord[Field.PositivePoliteTe],
            positivePoliteConditionalEba = csvRecord[Field.PositivePoliteConditionalEba],
            positivePoliteConditionalTara = csvRecord[Field.PositivePoliteConditionalTara],
            positivePolitePotential = csvRecord[Field.PositivePolitePotential],
            positivePolitePassive = csvRecord[Field.PositivePolitePassive],
            positivePoliteCausative = csvRecord[Field.PositivePoliteCausative],
            positivePoliteImperative = csvRecord[Field.PositivePoliteImperative],
            negativePlainPresent = csvRecord[Field.NegativePlainPresent],
            negativePlainPast = csvRecord[Field.NegativePlainPast],
            negativePlainTe = csvRecord[Field.NegativePlainTe],
            negativePlainConditionalEba = csvRecord[Field.NegativePlainConditionalEba],
            negativePlainConditionalTara = csvRecord[Field.NegativePlainConditionalTara],
            negativePlainPotential = csvRecord[Field.NegativePlainPotential],
            negativePlainPassive = csvRecord[Field.NegativePlainPassive],
            negativePlainCausative = csvRecord[Field.NegativePlainCausative],
            negativePlainImperative = csvRecord[Field.NegativePlainImperative],
            negativePolitePresent = csvRecord[Field.NegativePolitePresent],
            negativePolitePast = csvRecord[Field.NegativePolitePast],
            negativePoliteTe = csvRecord[Field.NegativePoliteTe],
            negativePoliteConditionalEba = csvRecord[Field.NegativePoliteConditionalEba],
            negativePoliteConditionalTara = csvRecord[Field.NegativePoliteConditionalTara],
            negativePolitePotential = csvRecord[Field.NegativePolitePotential],
            negativePolitePassive = csvRecord[Field.NegativePolitePassive],
            negativePoliteCausative = csvRecord[Field.NegativePoliteCausative],
            negativePoliteImperative = csvRecord[Field.NegativePoliteImperative],
        ),
        tags = csvRecord[Field.Tags],
    )

    data class Conjugations(
        val positivePlainPresent: String?,
        val positivePlainPast: String?,
        val positivePlainTe: String?,
        val positivePlainConditionalEba: String?,
        val positivePlainConditionalTara: String?,
        val positivePlainPotential: String?,
        val positivePlainPassive: String?,
        val positivePlainCausative: String?,
        val positivePlainImperative: String?,
        val positivePolitePresent: String?,
        val positivePolitePast: String?,
        val positivePoliteTe: String?,
        val positivePoliteConditionalEba: String?,
        val positivePoliteConditionalTara: String?,
        val positivePolitePotential: String?,
        val positivePolitePassive: String?,
        val positivePoliteCausative: String?,
        val positivePoliteImperative: String?,
        val negativePlainPresent: String?,
        val negativePlainPast: String?,
        val negativePlainTe: String?,
        val negativePlainConditionalEba: String?,
        val negativePlainConditionalTara: String?,
        val negativePlainPotential: String?,
        val negativePlainPassive: String?,
        val negativePlainCausative: String?,
        val negativePlainImperative: String?,
        val negativePolitePresent: String?,
        val negativePolitePast: String?,
        val negativePoliteTe: String?,
        val negativePoliteConditionalEba: String?,
        val negativePoliteConditionalTara: String?,
        val negativePolitePotential: String?,
        val negativePolitePassive: String?,
        val negativePoliteCausative: String?,
        val negativePoliteImperative: String?,
    )

    /**
     * Ordered list of anki CSV columns
     */
    enum class Field(
        override val headerName: String,
        override val getter: VocabularyCsvRecord.() -> String?
    ) : CsvRecord.Field<VocabularyCsvRecord, Field> {
        Id("id", { id }),
        Definition("definition", { definition }),
        PreferredSpelling("preferred_spelling", { preferredSpelling }),
        PhoneticSpelling("phonetic_spelling", { phoneticSpelling }),
        AltSpelling("alt_spelling", { altSpelling }),
        WordClass("word_class", { wordClass }),
        ConjugationKind("conjugation_kind", { conjugationKind }),
        JlptLevel("jlpt_level", { jlptLevel }),
        DateAdded("date_added", { dateAdded }),
        RowNum("row_num", { rowNum }),
        Lessons("lessons", { lessons }),
        PositivePlainPresent("positive_plain_present", { conjugations.positivePlainPresent }),
        PositivePlainPast("positive_plain_past", { conjugations.positivePlainPast }),
        PositivePlainTe("positive_plain_te", { conjugations.positivePlainTe }),
        PositivePlainConditionalEba("positive_plain_conditional_eba", { conjugations.positivePlainConditionalEba }),
        PositivePlainConditionalTara("positive_plain_conditional_tara", { conjugations.positivePlainConditionalTara }),
        PositivePlainPotential("positive_plain_potential", { conjugations.positivePlainPotential }),
        PositivePlainPassive("positive_plain_passive", { conjugations.positivePlainPassive }),
        PositivePlainCausative("positive_plain_causative", { conjugations.positivePlainCausative }),
        PositivePlainImperative("positive_plain_imperative", { conjugations.positivePlainImperative }),
        PositivePolitePresent("positive_polite_present", { conjugations.positivePolitePresent }),
        PositivePolitePast("positive_polite_past", { conjugations.positivePolitePast }),
        PositivePoliteTe("positive_polite_te", { conjugations.positivePoliteTe }),
        PositivePoliteConditionalEba("positive_polite_conditional_eba", { conjugations.positivePoliteConditionalEba }),
        PositivePoliteConditionalTara("positive_polite_conditional_tara", { conjugations.positivePoliteConditionalTara }),
        PositivePolitePotential("positive_polite_potential", { conjugations.positivePolitePotential }),
        PositivePolitePassive("positive_polite_passive", { conjugations.positivePolitePassive }),
        PositivePoliteCausative("positive_polite_causative", { conjugations.positivePoliteCausative }),
        PositivePoliteImperative("positive_polite_imperative", { conjugations.positivePoliteImperative }),
        NegativePlainPresent("negative_plain_present", { conjugations.negativePlainPresent }),
        NegativePlainPast("negative_plain_past", { conjugations.negativePlainPast }),
        NegativePlainTe("negative_plain_te", { conjugations.negativePlainTe }),
        NegativePlainConditionalEba("negative_plain_conditional_eba", { conjugations.negativePlainConditionalEba }),
        NegativePlainConditionalTara("negative_plain_conditional_tara", { conjugations.negativePlainConditionalTara }),
        NegativePlainPotential("negative_plain_potential", { conjugations.negativePlainPotential }),
        NegativePlainPassive("negative_plain_passive", { conjugations.negativePlainPassive }),
        NegativePlainCausative("negative_plain_causative", { conjugations.negativePlainCausative }),
        NegativePlainImperative("negative_plain_imperative", { conjugations.negativePlainImperative }),
        NegativePolitePresent("negative_polite_present", { conjugations.negativePolitePresent }),
        NegativePolitePast("negative_polite_past", { conjugations.negativePolitePast }),
        NegativePoliteTe("negative_polite_te", { conjugations.negativePoliteTe }),
        NegativePoliteConditionalEba("negative_polite_conditional_eba", { conjugations.negativePoliteConditionalEba }),
        NegativePoliteConditionalTara("negative_polite_conditional_tara", { conjugations.negativePoliteConditionalTara }),
        NegativePolitePotential("negative_polite_potential", { conjugations.negativePolitePotential }),
        NegativePolitePassive("negative_polite_passive", { conjugations.negativePolitePassive }),
        NegativePoliteCausative("negative_polite_causative", { conjugations.negativePoliteCausative }),
        NegativePoliteImperative("negative_polite_imperative", { conjugations.negativePoliteImperative }),
        Tags("tags", { tags }),
    }

    override val record: VocabularyCsvRecord = this

    override val fields: EnumEntries<Field> = Field.entries

}