package net.paploo.goi.persistence.anki.vocabulary

import org.apache.commons.csv.CSVRecord

internal data class VocabularyCsvRecord(
    val id: String?,
    val definition: String?,
    val preferredSpelling: String?,
    val phoneticSpelling: String?,
    val altSpelling: String?,
    val wordClass: String?,
    val conjugationKind: String?,
    val jlptLevel: String?,
    val dateAdded: String?,
    val rowNum: String?,
    val lessons: String?,
    val conjugations: Conjugations,
    val tags: String?,
) {

    data class Conjugations(
        val positivePlainPresent: String?,
        val positivePlainPast: String?,
        val positivePlainTe: String?,
        val positivePlainConditionalEba: String?,
        val positivePlainConditionalTara: String?,
        val positivePlainPotential: String?,
        val positivePlainPassive: String?,
        val positivePlainCausative: String?,
        val positivePlainImperative: String?,
        val positivePolitePresent: String?,
        val positivePolitePast: String?,
        val positivePoliteTe: String?,
        val positivePoliteConditionalEba: String?,
        val positivePoliteConditionalTara: String?,
        val positivePolitePotential: String?,
        val positivePolitePassive: String?,
        val positivePoliteCausative: String?,
        val positivePoliteImperative: String?,
        val negativePlainPresent: String?,
        val negativePlainPast: String?,
        val negativePlainTe: String?,
        val negativePlainConditionalEba: String?,
        val negativePlainConditionalTara: String?,
        val negativePlainPotential: String?,
        val negativePlainPassive: String?,
        val negativePlainCausative: String?,
        val negativePlainImperative: String?,
        val negativePolitePresent: String?,
        val negativePolitePast: String?,
        val negativePoliteTe: String?,
        val negativePoliteConditionalEba: String?,
        val negativePoliteConditionalTara: String?,
        val negativePolitePotential: String?,
        val negativePolitePassive: String?,
        val negativePoliteCausative: String?,
        val negativePoliteImperative: String?,
    )

    fun toRow(): List<String?> =
        Field.entries.map { field ->
            toMap()[field]
        }

    fun toMap(): Map<Field, String?> =
        fieldMap


    private val fieldMap by lazy {
        mapOf(
            Field.Id to id,
            Field.Definition to definition,
            Field.PreferredSpelling to preferredSpelling,
            Field.PhoneticSpelling to phoneticSpelling,
            Field.AltSpelling to altSpelling,
            Field.WordClass to wordClass,
            Field.ConjugationKind to conjugationKind,
            Field.JlptLevel to jlptLevel,
            Field.DateAdded to dateAdded,
            Field.RowNum to rowNum,
            Field.Lessons to lessons,
            Field.PositivePlainPresent to conjugations.positivePlainPresent,
            Field.PositivePlainPast to conjugations.positivePlainPast,
            Field.PositivePlainTe to conjugations.positivePlainTe,
            Field.PositivePlainConditionalEba to conjugations.positivePlainConditionalEba,
            Field.PositivePlainConditionalTara to conjugations.positivePlainConditionalTara,
            Field.PositivePlainPotential to conjugations.positivePlainPotential,
            Field.PositivePlainPassive to conjugations.positivePlainPassive,
            Field.PositivePlainCausative to conjugations.positivePlainCausative,
            Field.PositivePlainImperative to conjugations.positivePlainImperative,
            Field.PositivePolitePresent to conjugations.positivePolitePresent,
            Field.PositivePolitePast to conjugations.positivePolitePast,
            Field.PositivePoliteTe to conjugations.positivePoliteTe,
            Field.PositivePoliteConditionalEba to conjugations.positivePoliteConditionalEba,
            Field.PositivePoliteConditionalTara to conjugations.positivePoliteConditionalTara,
            Field.PositivePolitePotential to conjugations.positivePolitePotential,
            Field.PositivePolitePassive to conjugations.positivePolitePassive,
            Field.PositivePoliteCausative to conjugations.positivePoliteCausative,
            Field.PositivePoliteImperative to conjugations.positivePoliteImperative,
            Field.NegativePlainPresent to conjugations.negativePlainPresent,
            Field.NegativePlainPast to conjugations.negativePlainPast,
            Field.NegativePlainTe to conjugations.negativePlainTe,
            Field.NegativePlainConditionalEba to conjugations.negativePlainConditionalEba,
            Field.NegativePlainConditionalTara to conjugations.negativePlainConditionalTara,
            Field.NegativePlainPotential to conjugations.negativePlainPotential,
            Field.NegativePlainPassive to conjugations.negativePlainPassive,
            Field.NegativePlainCausative to conjugations.negativePlainCausative,
            Field.NegativePlainImperative to conjugations.negativePlainImperative,
            Field.NegativePolitePresent to conjugations.negativePolitePresent,
            Field.NegativePolitePast to conjugations.negativePolitePast,
            Field.NegativePoliteTe to conjugations.negativePoliteTe,
            Field.NegativePoliteConditionalEba to conjugations.negativePoliteConditionalEba,
            Field.NegativePoliteConditionalTara to conjugations.negativePoliteConditionalTara,
            Field.NegativePolitePotential to conjugations.negativePolitePotential,
            Field.NegativePolitePassive to conjugations.negativePolitePassive,
            Field.NegativePoliteCausative to conjugations.negativePoliteCausative,
            Field.NegativePoliteImperative to conjugations.negativePoliteImperative,
            Field.Tags to tags,
        )
    }

    /**
     * Ordered list of anki CSV columns
     */
    enum class Field(val headerName: String) {
        Id("id"),
        Definition("definition"),
        PreferredSpelling("preferred_spelling"),
        PhoneticSpelling("phonetic_spelling"),
        AltSpelling("alt_spelling"),
        WordClass("word_class"),
        ConjugationKind("conjugation_kind"),
        JlptLevel("jlpt_level"),
        DateAdded("date_added"),
        RowNum("row_num"),
        Lessons("lessons"),
        PositivePlainPresent("positive_plain_present"),
        PositivePlainPast("positive_plain_past"),
        PositivePlainTe("positive_plain_te"),
        PositivePlainConditionalEba("positive_plain_conditional_eba"),
        PositivePlainConditionalTara("positive_plain_conditional_tara"),
        PositivePlainPotential("positive_plain_potential"),
        PositivePlainPassive("positive_plain_passive"),
        PositivePlainCausative("positive_plain_causative"),
        PositivePlainImperative("positive_plain_imperative"),
        PositivePolitePresent("positive_polite_present"),
        PositivePolitePast("positive_polite_past"),
        PositivePoliteTe("positive_polite_te"),
        PositivePoliteConditionalEba("positive_polite_conditional_eba"),
        PositivePoliteConditionalTara("positive_polite_conditional_tara"),
        PositivePolitePotential("positive_polite_potential"),
        PositivePolitePassive("positive_polite_passive"),
        PositivePoliteCausative("positive_polite_causative"),
        PositivePoliteImperative("positive_polite_imperative"),
        NegativePlainPresent("negative_plain_present"),
        NegativePlainPast("negative_plain_past"),
        NegativePlainTe("negative_plain_te"),
        NegativePlainConditionalEba("negative_plain_conditional_eba"),
        NegativePlainConditionalTara("negative_plain_conditional_tara"),
        NegativePlainPotential("negative_plain_potential"),
        NegativePlainPassive("negative_plain_passive"),
        NegativePlainCausative("negative_plain_causative"),
        NegativePlainImperative("negative_plain_imperative"),
        NegativePolitePresent("negative_polite_present"),
        NegativePolitePast("negative_polite_past"),
        NegativePoliteTe("negative_polite_te"),
        NegativePoliteConditionalEba("negative_polite_conditional_eba"),
        NegativePoliteConditionalTara("negative_polite_conditional_tara"),
        NegativePolitePotential("negative_polite_potential"),
        NegativePolitePassive("negative_polite_passive"),
        NegativePoliteCausative("negative_polite_causative"),
        NegativePoliteImperative("negative_polite_imperative"),
        Tags("tags"),
    }

}