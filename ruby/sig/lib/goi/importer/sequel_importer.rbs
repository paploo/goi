module Goi
  module Importer
    class SequelImporter < BaseImporter

      type record = Hash[Symbol, untyped]

      attr_reader vocabulary_parser: VocabularyParser
      attr_reader definition_parser: DefinitionParser
      attr_reader spelling_parser: SpellingParser

      def initialize: (config: Config) -> void

      attr_reader config: Config

      attr_reader db: untyped

      def import: () -> [Model::Vocabulary::Linkages]

      class VocabularyParser
        def parse: (vocabulary_record: record, library: Library) -> Model::Vocabulary::Vocabulary
      end

      class DefinitionParser
        def parse: (vocabulary_id: String, library: Library, linkage_field: Symbol) -> Model::Vocabulary::Definition
      end

      class SpellingParser
        def parse: (vocabulary_id: String, library: Library, linkage_field: Symbol, required: bool) -> Model::Vocabulary::Spelling
      end


      class Library
        def initialize: (db: untyped db) -> void

        attr_reader vocabulary: [record]

        attr_reader definitions: Hash[String, [record]]

        attr_reader spellings: Hash[String, [record]]

        attr_reader linkages: Hash[String, record]

        attr_reader references: Hash[String, [record]]

        def load_all: () -> Library
      end
    end
  end
end
