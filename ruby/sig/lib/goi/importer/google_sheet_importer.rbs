module Goi
  module Importer
    class GoogleSheetImporter < BaseImporter

      type field_data = { linkage_field: Symbol, key: String }

      PREFERRED_SPELLING_FIELD_DATA: field_data
      PHONETIC_SPELLING_FIELD_DATA: field_data
      ALT_PHONETIC_SPELLING_FIELD_DATA: field_data
      KANJI_SPELLING_FIELD_DATA: field_data

      def initialize: (config: Config) -> void

      attr_reader config: Config

      attr_reader vocabulary_parser: VocabularyParser
      attr_reader definition_parser: DefinitionParser
      attr_reader spelling_parser: SpellingParser
      attr_reader conjugation_parser: ConjugationParser

      def import: () -> [Model::Vocabulary::Linkages]

      private

      def parse_rows: (rows: [Hash[String, String]] rows) -> [Model::Vocabulary::Linkages]

      def parse_row: (row: Hash[String, String] row) -> Model::Vocabulary::Linkages

      def parse_vocabulary: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::Vocabulary

      def parse_definition: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::Definition

      def parse_spelling: (row: Hash[String, String] row, field_data: field_data field_data, required: bool required, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::Spelling

      def parse_conjugation: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::ConjugationSet?

      class VocabularyParser

        def parse_row: (row: Hash[String, String] row) -> Model::Vocabulary::Vocabulary

        private

        def array_parse: (String?) -> [String]

      end

      class DefinitionParser

        def parse_row: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::Definition

      end

      class SpellingParser

        CODE_MAP: Hash[Symbol, String]

        def parse_row: (row: Hash[String, String] row, field_data: field_data field_data, ?required: bool required, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::Spelling

        private

        def infer_kind_code: (String value) -> String

      end

      class ConjugationParser

        def parse_row: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::ConjugationSet?

        private

        type politeness = 'PLAIN'|'POLITE'
        type charge = 'POSITIVE'|'NEGATIVE'
        type form = 'PRESENT'|'PAST'|'TE'
        type sort_rank = Integer

        KEY_LIST: [String]

        KEY_MAP: Hash[String, {politeness: politeness, charge: charge, form: form, sort_rank: sort_rank}]

        def parse_set: (row: Hash[String, String] row, vocabulary_id: String vocabulary_id) -> Model::Vocabulary::ConjugationSet

        def parse_conjugations: (row: Hash[String, String] row, key: String, conjugation_set_id: String) -> [Model::Vocabulary::Conjugation]

        def parse_conjugation: (row: Hash[String, String] row, key: String, conjugation_set_id: String) -> Model::Vocabulary::Conjugation?

      end

    end
  end
end
